/*
 * Copyright (c) 2017-2020 Kirill Mikhaylov <admin@datareducer.ru>
 *
 * Этот файл — часть программы DataReducer Console <http://datareducer.ru>.
 *
 * Программа DataReducer Console является свободным программным обеспечением.
 * Вы вправе распространять ее и/или модифицировать в соответствии с условиями
 * версии 3 либо, по вашему выбору, с условиями более поздней версии
 * Стандартной Общественной Лицензии GNU, опубликованной Free Software Foundation.
 *
 * Программа DataReducer Console распространяется в надежде, что она будет полезной,
 * но БЕЗО ВСЯКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
 * и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
 * Подробнее см. в Стандартной Общественной Лицензии GNU.
 *
 * Вы должны были получить копию Стандартной Общественной Лицензии GNU
 * вместе с этой программой. Если это не так, см. <https://www.gnu.org/licenses/>.
 */

package ru.datareducer.dataservice.entity;

import java.time.Duration;
import java.util.LinkedHashSet;

/**
 * Описание запроса к ресурсу REST-сервиса 1С.
 *
 * @author Kirill Mikhaylov
 */
public interface DataServiceRequest extends DataServiceEntity {
    /**
     * Возвращает набор полей ресурса, которые необходимо получить.
     *
     * @return Набор полей ресурса, которые необходимо получить.
     */
    LinkedHashSet<Field> getRequestedFields();

    /**
     * Возвращает признак запроса всех полей объекта.
     * Используется для оптимизации запроса.
     *
     * @return Значение признака.
     */
    boolean isAllFields();

    /**
     * Возвращает набор представлений полей.
     *
     * @return Набор представлений полей.
     */
    LinkedHashSet<Field> getPresentationFields();

    /**
     * Возвращает копию отбора, применяемого при запросе к ресурсу.
     * Для виртуальных таблиц регистров - возвращает копию ограничения состава исходных записей,
     * по которым при построении виртуальной таблицы будут получаться итоги.
     *
     * @return Копия отбора данных ресурса или ограничения состава исходных записей виртуальной таблицы.
     */
    Condition getCondition();

    /**
     * Возвращает признак запроса объектов, которые не попадают под ограничения доступа к данным.
     *
     * @return Значение признака.
     */
    boolean isAllowedOnly();

    /**
     * Возвращает время хранения объекта в кэше.
     *
     * @return Время хранения объекта в кэше.
     */
    Duration getCacheLifetime();

    /**
     * Установить время хранения объекта в кэше.
     *
     * @param cacheLifetime Время хранения объекта в кэше.
     */
    void setCacheLifetime(Duration cacheLifetime);

}
